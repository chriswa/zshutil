#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const os = require('os');

const homeDir = os.homedir();
const claudeSettingsPath = path.join(homeDir, '.claude', 'settings.json');
const zshutilPath = path.join(homeDir, 'zshutil');
const cdDriftGuardPath = path.join(zshutilPath, 'bin', 'internal', 'claude-cd-drift-guard');

const expectedHook = {
  matcher: "Bash",
  hooks: [
    {
      type: "command",
      command: cdDriftGuardPath
    }
  ]
};

function createBackup(filePath) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const fileName = path.basename(filePath);
  const backupPath = path.join(os.tmpdir(), `${fileName}.backup.${timestamp}`);

  fs.copyFileSync(filePath, backupPath);
  console.log(`Created backup: ${backupPath}`);
  return backupPath;
}

function main() {
  try {
    console.log(`Working with file: ${claudeSettingsPath}`);

    // Check if ~/.claude/settings.json exists
    if (!fs.existsSync(claudeSettingsPath)) {
      console.error('Error: ~/.claude/settings.json file not found');
      process.exit(1);
    }

    // Check if ~/zshutil/bin/internal/claude-cd-drift-guard exists
    if (!fs.existsSync(cdDriftGuardPath)) {
      console.error('Error: ~/zshutil/bin/internal/claude-cd-drift-guard not found');
      process.exit(1);
    }

    // Create backup before making changes
    createBackup(claudeSettingsPath);

    // Read and parse the current settings.json
    const settingsContent = fs.readFileSync(claudeSettingsPath, 'utf8');
    let settings;

    try {
      settings = JSON.parse(settingsContent);
    } catch (parseError) {
      console.error('Error: Invalid JSON in ~/.claude/settings.json');
      process.exit(1);
    }

    // Initialize hooks object if it doesn't exist
    if (!settings.hooks) {
      settings.hooks = {};
    }

    // Initialize PreToolUse array if it doesn't exist
    if (!settings.hooks.PreToolUse) {
      settings.hooks.PreToolUse = [];
    }

    // Check if a Bash hook already exists
    const existingBashHookIndex = settings.hooks.PreToolUse.findIndex(
      hook => hook.matcher === "Bash"
    );

    if (existingBashHookIndex !== -1) {
      // Check if our cd-drift-guard is already in the hooks
      const existingHooks = settings.hooks.PreToolUse[existingBashHookIndex].hooks || [];
      const alreadyInstalled = existingHooks.some(
        h => h.type === "command" && h.command === cdDriftGuardPath
      );

      if (alreadyInstalled) {
        console.log('CD Drift Guard hook is already installed in ~/.claude/settings.json');
        process.exit(0);
      }

      // Add our hook to the existing Bash matcher
      existingHooks.push({
        type: "command",
        command: cdDriftGuardPath
      });
      settings.hooks.PreToolUse[existingBashHookIndex].hooks = existingHooks;
      console.log('Added CD Drift Guard to existing Bash hooks');
    } else {
      // No Bash hook exists, add our complete hook configuration
      settings.hooks.PreToolUse.push(expectedHook);
      console.log('Created new Bash hook with CD Drift Guard');
    }

    // Write the updated settings back to file with pretty formatting
    const updatedContent = JSON.stringify(settings, null, 2) + '\n';
    fs.writeFileSync(claudeSettingsPath, updatedContent);

    console.log('Successfully configured CD Drift Guard hook in ~/.claude/settings.json');
    console.log(`Hook command: ${cdDriftGuardPath}`);

  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
}

main();
