#!/usr/bin/env bash

input=$(cat)

# Write input to ~/.claude.laststatusline.json
echo "$input" > ~/.claude.laststatusline.json

# Extract existing data
model=$(echo "$input" | jq -r '.model.display_name // "Unknown"')
dir=$(basename "$(echo "$input" | jq -r '.workspace.current_dir // "/"')")
style=$(echo "$input" | jq -r '.output_style.name // "default"')
cost=$(echo "$input" | jq -r '.cost.total_cost_usd // null')
lines_added=$(echo "$input" | jq -r '.cost.total_lines_added // null')
lines_removed=$(echo "$input" | jq -r '.cost.total_lines_removed // null')
total_duration=$(echo "$input" | jq -r '.cost.total_duration_ms // null')
api_duration=$(echo "$input" | jq -r '.cost.total_api_duration_ms // null')
session_id=$(echo "$input" | jq -r '.session_id // null')

# Try to extract context information from various possible locations
context_tokens=$(echo "$input" | jq -r '.context.tokens_used // .tokens_used // .context_tokens // null')
context_max=$(echo "$input" | jq -r '.context.tokens_max // .tokens_max // .context_max // null')
context_percentage=$(echo "$input" | jq -r '.context.percentage // .context_percent // null')
context_remaining=$(echo "$input" | jq -r '.context.remaining_percentage // .remaining_percent // null')

# Get git branch
branch=""
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    branch="$(git branch --show-current 2>/dev/null || echo detached)"
fi

# Build status line parts
parts=()
parts+=("$dir")
[[ -n "$branch" ]] && parts+=("$branch")

# Add context information if available
if [[ "$context_tokens" != "null" && "$context_max" != "null" && "$context_tokens" != "" && "$context_max" != "" ]]; then
    # Calculate percentage if not provided
    if [[ "$context_percentage" == "null" || "$context_percentage" == "" ]]; then
        context_percentage=$(echo "scale=0; $context_tokens * 100 / $context_max" | bc -l 2>/dev/null || echo "")
    fi
    if [[ -n "$context_percentage" ]]; then
        parts+=("ctx:${context_percentage}%")
    else
        parts+=("ctx:${context_tokens}/${context_max}")
    fi
elif [[ "$context_percentage" != "null" && "$context_percentage" != "" ]]; then
    parts+=("ctx:${context_percentage}%")
elif [[ "$context_remaining" != "null" && "$context_remaining" != "" ]]; then
    parts+=("ctx:${context_remaining}%left")
fi

parts+=("$model")
[[ "$style" != "default" ]] && parts+=("$style")

if [[ "$cost" != "null" && "$cost" != "" ]]; then
    cost_display=$(printf "%.4f" "$cost")
    parts+=("\$${cost_display}")
fi

if [[ "$lines_added" != "null" && "$lines_added" != "" ]] && [[ "$lines_removed" != "null" && "$lines_removed" != "" ]]; then
    parts+=("[+${lines_added}/-${lines_removed}]")
fi

# Duration handling
duration_parts=()
if [[ "$total_duration" != "null" && "$total_duration" != "" ]]; then
    total_s=$(echo "scale=1; $total_duration / 1000" | bc -l 2>/dev/null || echo "$total_duration" | awk '{print $1/1000}')
    duration_parts+=("${total_s}s")
fi
if [[ "$api_duration" != "null" && "$api_duration" != "" ]]; then
    api_s=$(echo "scale=1; $api_duration / 1000" | bc -l 2>/dev/null || echo "$api_duration" | awk '{print $1/1000}')
    duration_parts+=("api:${api_s}s")
fi

if [[ ${#duration_parts[@]} -gt 0 ]]; then
    duration_display=$(printf "%s" "${duration_parts[0]}")
    for i in "${duration_parts[@]:1}"; do
        duration_display="$duration_display $i"
    done
    parts+=("[$duration_display]")
fi

# Add session_id at the end
if [[ "$session_id" != "null" && "$session_id" != "" ]]; then
    parts+=("$session_id")
fi

# Join parts with " | "
result=""
for i in "${!parts[@]}"; do
    if [[ $i -eq 0 ]]; then
        result="${parts[$i]}"
    else
        result="$result | ${parts[$i]}"
    fi
done

printf "\033[2m%s\033[0m" "$result"